//Your task is to check whether the given parentheses in the string are balanced or not.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_SIZE 102

typedef struct {
    char items[MAX_SIZE];
    int top;
} Stack;

void init(Stack* s) {
    s->top = -1;
}

int isFull(Stack* s) {
    return s->top == MAX_SIZE - 1;
}

int isEmpty(Stack* s) {
    return s->top == -1;
}

void push(Stack* s, char value) {
    if (!isFull(s)) {
        s->items[++(s->top)] = value;
    }
}

char pop(Stack* s) {
    if (!isEmpty(s)) {
        return s->items[(s->top)--];
    }
    return '\0'; // Return a null character if stack is empty
}

char peek(Stack* s) {
    if (!isEmpty(s)) {
        return s->items[s->top];
    }
    return '\0'; // Return a null character if stack is empty
}

int isMatchingPair(char open, char close) {
    if (open == '(' && close == ')') return 1;
    if (open == '{' && close == '}') return 1;
    if (open == '[' && close == ']') return 1;
    return 0;
}

char * BalancedBrackets(char *str) {
	Stack stack;
    init(&stack);
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == '(' || str[i] == '{' || str[i] == '[') {
            push(&stack, str[i]);
        } else if (str[i] == ')' || str[i] == '}' || str[i] == ']') {
            if (isEmpty(&stack) || !isMatchingPair(pop(&stack), str[i])) {
                return "Not balanced";
            }
        }
    }
    if (isEmpty(&stack)) {
        return "Balanced";
    } else {
        return "Not balanced";
	}
}

int main(int argc, char *argv[]) {
	char *str = argv[1];
	printf("%s\n", BalancedBrackets(str));
	return 0;
}



/*

Sample Test Cases
Test case 1
Command line arguments: 
[]{}()
Balanced⏎	
Test case 2
Command line arguments: 
[{}}(
Not·balanced⏎

*/
