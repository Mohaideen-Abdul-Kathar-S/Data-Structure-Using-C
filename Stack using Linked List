//Write a C program that implements a stack using linked list. The program should have push(), pop(), display(), isEmpty() and peek() functions that uses switch cases and works on the choice of the user.


#include <stdio.h>
#include <stdlib.h>

struct stack {
	int data;
	struct stack *next;
};

typedef struct stack *stk;
stk top = NULL;


void pop() {
if(top==NULL){
printf("Stack is underflow.\n");
}else{
stk temp=top;
top=temp->next;
printf("Popped value = %d\n",temp->data);
free(temp);
}
}


void peek() {
if(top==NULL){
printf("Stack is underflow.\n");
}else printf("Peek value = %d\n",top->data);
}

void isEmpty() {
if(top==NULL){
printf("Stack is empty.\n");
}else{
printf("Stack is not empty.\n");
}
}

void push(int x) {
stk node=(stk )malloc(sizeof(stk));
if(node=='\0'){

}else{

node->data=x;
node->next=top;
top=node;
printf("Successfully pushed.\n");
}
}

void display() {
if(top==NULL){
printf("Stack is empty.\n");
}else{
stk temp=top;
printf("Elements of the stack are : ");
}

/*


Sample Test Cases
Test case 1
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·1	
Enter·element·:·10	
Successfully·pushed.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·1	
Enter·element·:·20	
Successfully·pushed.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·1	
Enter·element·:·30	
Successfully·pushed.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·2	
Popped·value·=·30⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·3	
Elements·of·the·stack·are·:·20·10·⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·4	
Stack·is·not·empty.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·5	
Peek·value·=·20⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·2	
Popped·value·=·20⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·2	
Popped·value·=·10⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·3	
Stack·is·empty.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·4	
Stack·is·empty.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·6	
Test case 2
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·4	
Stack·is·empty.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·5	
Stack·is·underflow.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·3	
Stack·is·empty.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·1	
Enter·element·:·45	
Successfully·pushed.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·1	
Enter·element·:·67	
Successfully·pushed.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·3	
Elements·of·the·stack·are·:·67·45·⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·5	
Peek·value·=·67⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·3	
Elements·of·the·stack·are·:·67·45·⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·2	
Popped·value·=·67⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·2	
Popped·value·=·45⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·2	
Stack·is·underflow.⏎	
1.Push·2.Pop·3.Display·4.Is·Empty·5.Peek·6.Exit⏎	
Enter·your·option·:·6

*/
